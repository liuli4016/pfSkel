#include "common.h"


typedef enum {
  ASA_NONE = 0,
  ASA_NORMALS,
  ASA_CRITICAL_POINTS,
  ASA_NORMALS_AND_CRITICAL_POINTS,
} Adaptive_Smoothing_Algorithm;


///////////////////////////////////////////////////////////////////////////////
// Function CalculatePotentialField
//   Computes the potential field generated by placing electrical charges
//   on the boundary of a 3D object.
///////////////////////////////////////////////////////////////////////////////
bool CalculateGradientField(
	int L, int M, int N, 	      // [in] size of volume
	unsigned char* f, 	      // [in] volume flags
	ForceVector *force,		      // [out] force field	
	int smSteps = 10,             // [in] number of smoothing steps
	Adaptive_Smoothing_Algorithm adaptiveAlgorithm = ASA_NONE
	                              // [in] adaptive algorithm to use

);


/*******

Detailed parameter description:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- smoothingSteps = number of smoothing steps to be applied to the surface 
    normals before propagating them toward the interior.

    10 is a good value.

    !!! 
        Too many smoothing steps will adversely affect the resulting field
        because some vectors will not change because their neighborhood is 
        symmetric and the entire neighborhood will tend to align with them...
    !!!

- inOut = flag indicating whether the field is to be computed only inside the 
    object (=false) or both inside and outside the object (in the entire 
    bounding box) (=true).
    !!! 
       This parameter is IGNORED for now ...
    !!!

********/
